{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAGZC,mBAAS,IAHG,mBAGzCC,EAHyC,KAG7BC,EAH6B,KAkBhD,OACI,uBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,UACI,8CACA,uBACIO,KAAK,OACLC,MAAUT,EACVU,SAnBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,c,+BCTnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcVM,GAdU,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGjC,OADAc,QAAQC,IAAKL,EAAOV,GAEhB,8BACI,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAQjB,EAAMkB,IAAOR,IAC1B,kCAAMA,EAAN,aCLHS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDZ,SAAEA,GAAe,IAAD,EAEfd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJ4B,mBAElCC,EAFkC,KAE3BC,EAF2B,KA2BzC,OApBAC,qBAAU,WAEN1B,EAASC,GACJ0B,MAAM,SAAAC,GAEHC,YAAY,WAERJ,EAAS,CACLjB,KAAMoB,EACNL,SAAS,MAGd,UAIZ,CAACtB,IAIGuB,EDxBwBM,CAAc7B,GAAjCa,EAFyB,EAE9BN,KAAae,EAFiB,EAEjBA,QAEpB,OACI,qCACA,oBAAIJ,UAAU,wCAAd,SAAwDlB,IAEtDsB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEYL,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADGA,EAAIC,aEUzBmB,EAxBM,WAAM,MAGa5C,mBAAS,CAAC,gBAHvB,mBAGhB6C,EAHgB,KAGJ9C,EAHI,KAWvB,OACI,qCAEI,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACK8C,EAAWtB,KAAI,SAACT,GAAD,OACZ,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCjBlCgC,IAASC,OAEL,cAAC,EAAD,CAAchD,eAAa,IAC7BiD,SAASC,eAAe,W","file":"static/js/main.75b8dfe9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {PropTypes} from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    //const [inputValue, setInputValue] = useState(); //undefined\r\n    const [inputValue, setInputValue] = useState(''); //String vacio\r\n\r\n    const handleInputchange = (e) => {\r\n        setInputValue( e.target.value );\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2){\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit }>\r\n            <h2>Add Category</h2>\r\n            <input \r\n                type=\"text\"\r\n                value = { inputValue }\r\n                onChange = { handleInputchange }\r\n            />\r\n        </form>                    \r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func\r\n}\r\n\r\n\r\n","export const getGifs = async ( category ) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=oVGH3ZuElFIwOYe1oYix7tOVCf73ZJB8`\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return ( gifs );\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n\r\n    console.log( title, url);\r\n    return (\r\n        <div>\r\n            <div className=\"card animate__animated animate__bounce\">\r\n                <img src = { url } alt = {title}></img>\r\n                <p> { title } </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images, loading} = useFetchGifs( category );\r\n    \r\n    return (\r\n        <> \r\n        <h3 className=\"animate__animated animate__backInDown\">{ category }</h3>   \r\n\r\n        { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n\r\n        <div className=\"card-grid\">                \r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key = { img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }                       \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n"," import { useState, useEffect } from \"react\";\r\n import { getGifs } from '../helpers/getGifs';\r\n\r\n export const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        \r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                setTimeout( () => {\r\n                    \r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n            \r\n                }, 3000);\r\n\r\n            })\r\n\r\n    }, [category])\r\n\r\n\r\n\r\n    return state; // {data:[], loading: true};\r\n\r\n }","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n    //const categories = ['One punch','Samurai X','Dragon Ball'];\r\n\r\n    const [categories, setCategories] = useState([\"Dragon Ball\"]);\r\n\r\n    //const handleAdd = () =>{\r\n    //setCategories(categories.push('Berserk')); asi no, por que cambia el estado del arreglo por un string\r\n    //setCategories( [...categories, 'Berserk'] ); //Con spread se clona el arreglo anterior y se aÃ±ade el siguiente valor\r\n    //setCategories( cats => [...cats, 'Berserk']);\r\n    //}\r\n\r\n    return (\r\n        <>\r\n        \r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            <ol>\r\n                {categories.map((category) => (\r\n                    <GifGrid key={category} category={category} />\r\n                ))}\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  \n    <GifExpertApp setCategories />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}